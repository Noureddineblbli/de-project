version: '3.8'

networks:
  data-pipeline-network:
    driver: bridge

services:
  # -------------------- POSTGRES (DATA WAREHOUSE) --------------------
  postgres-dw:
    image: postgres:13
    container_name: postgres-dw
    environment:
      - POSTGRES_USER=dw_user
      - POSTGRES_PASSWORD=dw_password
      - POSTGRES_DB=dw_database
    ports:
      - "5432:5432"
    volumes:
      - postgres-dw-data:/var/lib/postgresql/data
    networks:
      - data-pipeline-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U dw_user -d dw_database" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # -------------------- SPARK --------------------
  spark-master:
    image: bitnami/spark:3
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      - "8081:8080" # Spark Master Web UI
    networks:
      - data-pipeline-network
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
      - ./data:/opt/bitnami/spark/data

  spark-worker:
    image: bitnami/spark:3
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
    depends_on:
      - spark-master
    networks:
      - data-pipeline-network
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
      - ./data:/opt/bitnami/spark/data

  # -------------------- AIRFLOW --------------------
  postgres-metastore:
    image: postgres:13
    container_name: postgres-metastore
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    networks:
      - data-pipeline-network
    volumes:
      - postgres-metastore-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U airflow -d airflow" ]
      interval: 5s
      timeout: 5s
      retries: 5

  airflow-init:
    build: .
    container_name: airflow-init
    depends_on:
      postgres-metastore:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres-metastore/airflow
      - AIRFLOW__CORE__FERNET_KEY=FBacS24a99edih393fTq-p4aT2yUPAd2d7Z0iL2b8hE=
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    command: >
      bash -c "
        airflow db init &&
        airflow users create --role Admin --username admin --email admin@example.com --firstname Admin --lastname User --password admin
      "
    networks:
      - data-pipeline-network

  airflow-webserver:
    build: .
    container_name: airflow-webserver
    restart: always
    command: airflow webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres-metastore/airflow
      - AIRFLOW__CORE__FERNET_KEY=FBacS24a99edih393fTq-p4aT2yUPAd2d7Z0iL2b8hE=
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./sql:/opt/airflow/sql
    networks:
      - data-pipeline-network
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-scheduler:
    build: .
    container_name: airflow-scheduler
    restart: always
    command: airflow scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres-metastore/airflow
      - AIRFLOW__CORE__FERNET_KEY=FBacS24a99edih393fTq-p4aT2yUPAd2d7Z0iL2b8hE=
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      # Crucial for Spark driver communication
      - SPARK_DRIVER_HOST=airflow-scheduler
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      # Mount Spark bits into the scheduler
      - ./spark/jobs:/opt/bitnami/spark/jobs
      - ./data:/opt/bitnami/spark/data
      - /var/run/docker.sock:/var/run/docker.sock
      - ./sql:/opt/airflow/sql
    networks:
      - data-pipeline-network

volumes:
  postgres-dw-data:
  postgres-metastore-data: