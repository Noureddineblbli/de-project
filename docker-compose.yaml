version: '3.8'

services:
  # -------------------- POSTGRES (DATA WAREHOUSE) --------------------
  postgres-dw:
    image: postgres:13
    container_name: postgres-dw
    environment:
      - POSTGRES_USER=dw_user
      - POSTGRES_PASSWORD=dw_password
      - POSTGRES_DB=dw_database
    ports:
      - "5432:5432" # Exposes Postgres to your host machine
    volumes:
      - postgres-dw-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dw_user -d dw_database"]
      interval: 5s
      timeout: 5s
      retries: 5

  # -------------------- SPARK --------------------
  spark-master:
    image: bitnami/spark:3
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
    ports:
      - "8081:8080" # Spark Master Web UI (Note: Port 8081 to avoid conflict with Airflow)
      - "7077:7077" # Spark Master Port
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs # Mount our Spark jobs folder
      - ./data:/opt/bitnami/spark/data     # Mount our data folder

  # -------------------- AIRFLOW --------------------
  # This setup is based on the official Airflow Docker Compose quick-start guide.
  
  # The "metastore" for Airflow, a separate Postgres database.
  postgres-metastore:
    image: postgres:13
    container_name: postgres-metastore
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres-metastore-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Airflow service to initialize the database
  airflow-init:
    image: apache/airflow:2.8.1
    container_name: airflow-init
    depends_on:
      postgres-metastore:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres-metastore/airflow
      - AIRFLOW__CORE__FERNET_KEY=FBacS24a99edih393fTq-p4aT2yUPAd2d7Z0iL2b8hE= # Pre-generated for convenience
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    command: >
      bash -c "
        airflow db init &&
        airflow users create --role Admin --username admin --email admin@example.com --firstname Admin --lastname User --password admin
      "

  # Airflow's web server, the UI you will interact with
  airflow-webserver:
    image: apache/airflow:2.8.1
    container_name: airflow-webserver
    restart: always
    command: webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres-metastore/airflow
      - AIRFLOW__CORE__FERNET_KEY=FBacS24a99edih393fTq-p4aT2yUPAd2d7Z0iL2b8hE=
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
    ports:
      - "8080:8080" # The Airflow UI
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Airflow's scheduler, which triggers DAG runs
  airflow-scheduler:
    image: apache/airflow:2.8.1
    container_name: airflow-scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres-metastore/airflow
      - AIRFLOW__CORE__FERNET_KEY=FBacS24a99edih393fTq-p4aT2yUPAd2d7Z0iL2b8hE=
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: scheduler

# Docker volumes to persist data
volumes:
  postgres-dw-data:
  postgres-metastore-data: